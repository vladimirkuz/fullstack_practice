{"version":3,"sources":["utils/XPress.js","views/Artist.js","views/Landing.js","views/Series.js","views/App.js","index.js","utils/camelcase-keys/index.js"],"names":["XPress","baseUrl","getSeries","url","fetch","then","response","ok","json","jsonResponse","series","map","seriesItem","camelcaseKeys","Promise","resolve","createSeries","fetchOptions","method","headers","body","JSON","stringify","updateSeries","id","deleteSeries","getArtists","artists","artist","getArtist","createArtist","updateArtist","restoreArtist","isCurrentlyEmployed","deleteArtist","getSeriesById","getIssues","seriesId","issues","issue","createIssue","updateIssue","deleteIssue","issueId","Artist","props","state","mode","updateName","bind","updateDob","updateBiography","saveArtist","cancelEdit","this","match","params","setState","savedArtist","parse","newArtist","name","dateOfBirth","biography","event","target","value","history","push","stateArtist","className","saveButton","cancelButton","deleteButton","hasChanges","hasAllRequiredFields","onClick","renderRetired","onChange","renderButtons","Component","withRouter","Landing","length","sortedSeries","sortItemNames","sortedArtists","items","sort","item1","item2","toLowerCase","Link","to","style","backgroundColor","randomFlatColors","key","src","alt","renderSeries","renderArtists","Series","updateSeriesName","updateSeriesDescription","updateIssueName","updateIssueNumber","updateIssueDate","updateIssueArtist","saveSeries","cancelSeriesEdit","addIssue","saveIssue","cancelIssueEdit","savedSeries","initializeIssues","newSeries","description","sortedIssues","sortIssues","savedIssues","artistMapping","forEach","issue1","issue2","issueNumber","issueIndex","savedIssue","publicationDate","artistId","newIssue","Object","keys","splice","options","seriesHasChanges","seriesHasAllRequiredFields","issueHasChanges","issueHasAllRequiredFields","e","type","generateArtistOptions","renderIssueButtons","placeholder","renderSeriesButtons","renderIssues","App","Route","exact","path","component","ReactDOM","render","document","getElementById","mapObj","require","camelCase","module","exports","input","opts","exclude","assign","deep","val","arr","some","x","test","has"],"mappings":"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","file":"static/js/main.571ace14.chunk.js","sourcesContent":["import camelcaseKeys from './camelcase-keys/index';\nimport 'whatwg-fetch';\n\nconst XPress = {};\nconst baseUrl = 'http://localhost:4000/api';\n\nXPress.getSeries = () => {\n  const url = `${baseUrl}/series`;\n\n  return fetch(url).then(response => {\n    if (!response.ok) {\n      return new Promise(resolve => resolve([]));\n    }\n    return response.json().then(jsonResponse => {\n      return jsonResponse.series.map(seriesItem => camelcaseKeys(seriesItem));\n    });\n  });\n};\n\nXPress.createSeries = series => {\n  const url = `${baseUrl}/series`;\n  const fetchOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({series: series})\n  };\n  return fetch(url, fetchOptions).then(response => {\n    if (!response.ok) {\n      return new Promise(resolve => resolve(null));\n    }\n    return response.json().then(jsonResponse => {\n      return camelcaseKeys(jsonResponse.series);\n    });\n  });\n};\n\nXPress.updateSeries = series => {\n  const url = `${baseUrl}/series/${series.id}`;\n  const fetchOptions = {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({series: series})\n  };\n  return fetch(url, fetchOptions).then(response => {\n    if (!response.ok) {\n      return new Promise(resolve => resolve(null));\n    }\n    return response.json().then(jsonResponse => {\n      return camelcaseKeys(jsonResponse.series);\n    });\n  });\n};\n\nXPress.deleteSeries = id => {\n  const url = `${baseUrl}/series/${id}`;\n  const fetchOptions = {\n    method: 'DELETE'\n  };\n  return fetch(url, fetchOptions);\n};\n\nXPress.getArtists = () => {\n  const url = `${baseUrl}/artists`;\n\n  return fetch(url).then(response => {\n    if (!response.ok) {\n      return new Promise(resolve => resolve([]));\n    }\n    return response.json().then(jsonResponse => {\n      return jsonResponse.artists.map(artist => camelcaseKeys(artist));\n    });\n  });\n};\n\nXPress.getArtist = id => {\n  const url = `${baseUrl}/artists/${id}`;\n  return fetch(url).then(response => {\n    if (!response.ok) {\n      return new Promise(resolve => resolve(null));\n    }\n    return response.json().then(jsonResponse => {\n      return camelcaseKeys(jsonResponse.artist);\n    });\n  });\n};\n\nXPress.createArtist = artist => {\n  const url = `${baseUrl}/artists`;\n  const fetchOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({artist: artist})\n  };\n  return fetch(url, fetchOptions).then(response => {\n    if (!response.ok) {\n      return new Promise(resolve => resolve(null));\n    }\n    return response.json().then(jsonResponse => {\n      return camelcaseKeys(jsonResponse.artist);\n    });\n  });\n};\n\nXPress.updateArtist = artist => {\n  const url = `${baseUrl}/artists/${artist.id}`;\n  const fetchOptions = {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({artist: artist})\n  };\n  return fetch(url, fetchOptions).then(response => {\n    if (!response.ok) {\n      return new Promise(resolve => resolve(null));\n    }\n    return response.json().then(jsonResponse => {\n      return camelcaseKeys(jsonResponse.artist);\n    });\n  });\n};\n\nXPress.restoreArtist = artist => {\n  artist.isCurrentlyEmployed = 1;\n  const url = `${baseUrl}/artists/${artist.id}`;\n  const fetchOptions = {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({artist: artist})\n  };\n  return fetch(url, fetchOptions).then(response => {\n    if (!response.ok) {\n      return new Promise(resolve => resolve(null));\n    }\n    return response.json().then(jsonResponse => {\n      return camelcaseKeys(jsonResponse.artist);\n    });\n  });\n};\n\nXPress.deleteArtist = id => {\n  const url = `${baseUrl}/artists/${id}`;\n  const fetchOptions = {\n    method: 'DELETE'\n  };\n  return fetch(url, fetchOptions).then(response => {\n    if (!response.ok) {\n      return new Promise(resolve => resolve(null));\n    }\n    return response.json().then(jsonResponse => {\n      return camelcaseKeys(jsonResponse.artist);\n    });\n  });\n};\n\nXPress.getSeriesById = id => {\n  const url = `${baseUrl}/series/${id}`;\n  return fetch(url).then(response => {\n    if (!response.ok) {\n      return new Promise(resolve => resolve(null));\n    }\n    return response.json().then(jsonResponse => {\n      return camelcaseKeys(jsonResponse.series);\n    });\n  });\n};\n\nXPress.getIssues = seriesId => {\n  const url = `${baseUrl}/series/${seriesId}/issues`;\n  return fetch(url).then(response => {\n    if (!response.ok) {\n      return new Promise(resolve => resolve([]));\n    }\n    return response.json().then(jsonResponse => {\n      return jsonResponse.issues.map(issue => camelcaseKeys(issue));\n    });\n  });\n};\n\nXPress.createIssue = (issue, seriesId) => {\n  const url = `${baseUrl}/series/${seriesId}/issues`;\n  const fetchOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({issue: issue})\n  };\n  return fetch(url, fetchOptions).then(response => {\n    if (!response.ok) {\n      return new Promise(resolve => resolve(null));\n    }\n    return response.json().then(jsonResponse => {\n      return camelcaseKeys(jsonResponse.issue);\n    });\n  });\n};\n\nXPress.updateIssue = (issue, seriesId) => {\n  const url = `${baseUrl}/series/${seriesId}/issues/${issue.id}`;\n  const fetchOptions = {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({issue: issue})\n  };\n  return fetch(url, fetchOptions).then(response => {\n    if (!response.ok) {\n      return new Promise(resolve => resolve(null));\n    }\n    return response.json().then(jsonResponse => {\n      return camelcaseKeys(jsonResponse.issue);\n    });\n  });\n};\n\nXPress.deleteIssue = (issueId, seriesId) => {\n  const url = `${baseUrl}/series/${seriesId}/issues/${issueId}`;\n  const fetchOptions = {\n    method: 'DELETE'\n  };\n  return fetch(url, fetchOptions);\n};\n\nexport default XPress;","import React, { Component } from 'react';\nimport { withRouter } from \"react-router-dom\";\n\nimport XPress from '../utils/XPress';\n\nclass Artist extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      artist: null,\n      mode: 'view'\n    };\n\n    this.updateName = this.updateName.bind(this);\n    this.updateDob = this.updateDob.bind(this);\n    this.updateBiography = this.updateBiography.bind(this);\n    this.saveArtist = this.saveArtist.bind(this);\n    this.cancelEdit = this.cancelEdit.bind(this);\n    this.deleteArtist = this.deleteArtist.bind(this);\n    this.restoreArtist = this.restoreArtist.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.match.params.id === 'new') {\n      const newArtist = {\n        name: '',\n        dateOfBirth: '',\n        biography: '',\n        isCurrentlyEmployed: 1\n      };\n\n      this.setState({\n        artist: newArtist,\n        savedArtist: JSON.parse(JSON.stringify(newArtist))\n      });\n      return;\n    }\n\n    XPress.getArtist(this.props.match.params.id).then(artist => {\n      if (artist) {\n        this.setState({\n          artist: artist,\n          savedArtist: JSON.parse(JSON.stringify(artist))\n        });\n      }\n    });\n  }\n\n  hasAllRequiredFields() {\n    const artist = this.state.artist;\n    if (!artist.name || !artist.dateOfBirth || !artist.biography) {\n      return false;\n    }\n    return true;\n  }\n\n  hasChanges() {\n    const artist = this.state.artist;\n    const savedArtist = this.state.savedArtist;\n    if (!savedArtist) {\n      return false;\n    }\n\n    if (artist.name === savedArtist.name &&\n        artist.dateOfBirth === savedArtist.dateOfBirth &&\n        artist.biography === savedArtist.biography) {\n      return false;\n    }\n\n    return true;\n  }\n\n  updateName(event) {\n    const artist = JSON.parse(JSON.stringify(this.state.artist));\n    artist.name = event.target.value;\n    this.setState({artist: artist});\n  }\n\n  updateDob(event) {\n    const artist = JSON.parse(JSON.stringify(this.state.artist));\n    artist.dateOfBirth = event.target.value;\n    this.setState({artist: artist});\n  }\n\n  updateBiography(event) {\n    const artist = JSON.parse(JSON.stringify(this.state.artist));\n    artist.biography = event.target.value;\n    this.setState({artist: artist});\n  }\n\n  saveArtist() {\n    if (this.state.artist.id) {\n      XPress.updateArtist(this.state.artist).then(artist => {\n        this.setState({\n          artist: artist,\n          savedArtist: JSON.parse(JSON.stringify(artist))\n        });\n      });\n    } else {\n      XPress.createArtist(this.state.artist).then(artist => {\n        this.props.history.push(`/artists/${artist.id}`);\n        this.setState({\n          artist: artist,\n          savedArtist: JSON.parse(JSON.stringify(artist))\n        });\n      });\n    }\n  }\n\n  cancelEdit() {\n    this.setState({\n      artist: JSON.parse(JSON.stringify(this.state.savedArtist))\n    });\n  }\n\n  restoreArtist() {\n    XPress.restoreArtist(this.state.savedArtist).then(artist => {\n      const stateArtist = JSON.parse(JSON.stringify(this.state.artist));\n      stateArtist.isCurrentlyEmployed = artist.isCurrentlyEmployed;\n      this.setState({\n        artist: stateArtist,\n        savedArtist: artist\n      });\n    });\n  }\n\n  deleteArtist() {\n    XPress.deleteArtist(this.state.artist.id).then(artist => {\n      const stateArtist = JSON.parse(JSON.stringify(this.state.artist));\n      stateArtist.isCurrentlyEmployed = artist.isCurrentlyEmployed;\n      this.setState({\n        artist: stateArtist,\n        savedArtist: stateArtist\n      });\n    });\n  }\n\n  renderRetired() {\n    if (!this.state.artist.isCurrentlyEmployed) {\n      return <h2 className=\"retired\">Retired</h2>;\n    }\n    return '';\n  }\n\n  renderButtons() {\n    const artist = this.state.artist;\n    let saveButton, cancelButton, deleteButton;\n\n    if (this.hasChanges() && this.hasAllRequiredFields()) {\n      saveButton =<a className={'button'} onClick={this.saveArtist}>Save</a>;\n    } else {\n      saveButton = <a className='button inactive'>Save</a>;\n    }\n\n    if (this.hasChanges()) {\n      cancelButton =<a className={'button'} onClick={this.cancelEdit}>Cancel</a>\n    } else {\n      cancelButton = <a className='button inactive'>Cancel</a>;\n    }\n\n    if (artist.isCurrentlyEmployed && artist.id) {\n      deleteButton = <a className='button delete' onClick={this.deleteArtist}>Delete</a>;\n    } else if (artist.id) {\n      deleteButton = <a className='button' onClick={this.restoreArtist}>Restore</a>\n    } else {\n      deleteButton = '';\n    }\n\n    return (\n      <div className=\"buttons\">\n        {saveButton}\n        {cancelButton}\n        {deleteButton}\n      </div>\n    )\n  }\n\n  render() {\n    if (!this.state.artist) {\n      return <div className=\"Artist\"></div>\n    }\n    const artist = this.state.artist;\n    return (\n      <div className=\"Artist\">\n        <div className=\"description\">\n          {this.renderRetired()}\n          <h2>Name: <input onChange={this.updateName} value={artist.name} /></h2>\n          <h3>DOB: <input onChange={this.updateDob} value={artist.dateOfBirth} /></h3>\n          <div className=\"divider\"></div>\n          <h3>Biography:</h3>\n          <textarea onChange={this.updateBiography} value={artist.biography} />\n        </div>\n        {this.renderButtons()}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Artist);\n","import randomFlatColors from 'random-flat-colors';\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport XPress from '../utils/XPress';\n\nclass Landing extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      artists: [],\n      series: []\n    };\n  }\n\n  componentDidMount() {\n    XPress.getSeries().then(series => {\n      if (series.length) {\n        const sortedSeries = this.sortItemNames(series);\n        this.setState({series: sortedSeries});\n      }\n    });\n\n    XPress.getArtists().then(artists => {\n      if (artists.length) {\n        const sortedArtists = this.sortItemNames(artists);\n        this.setState({artists: sortedArtists});\n      }\n    });\n  }\n\n  sortItemNames(items) {\n    return items.sort((item1, item2) => {\n      if (item2.name.toLowerCase() < item1.name.toLowerCase()) {\n        return 1;\n      } else {\n        return -1;\n      }\n    });\n  }\n\n  renderSeries() {\n    return this.state.series.map(series => {\n      return (\n        <Link to={`/series/${series.id}`}\n           className=\"item\"\n           style={{backgroundColor: randomFlatColors()}}\n           key={series.id}>\n          <h3>{series.name}</h3>\n        </Link>\n      );\n    });\n  }\n\n  renderArtists() {\n    return this.state.artists.map(artist => {\n      return (\n        <Link to={`/artists/${artist.id}`}\n           className=\"item\"\n           key={artist.id}>\n           <h3>{artist.name}</h3>\n           <img src='public/img/artist.svg' alt=''/>\n        </Link>\n      );\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"Landing\">\n        <h2>CHOOSE A SERIES</h2>\n        <div className=\"series item-list\">\n          {this.renderSeries()}\n        </div>\n        <Link to=\"/series/new\" className=\"button\">ADD</Link>\n        <h2>ARTISTS</h2>\n        <div className=\"artist item-list\">\n          {this.renderArtists()}\n        </div>\n        <Link to=\"/artists/new\" className=\"button\">ADD</Link>\n      </div>\n    );\n  }\n}\n\nexport default Landing;\n","import React, { Component } from 'react';\nimport { withRouter } from \"react-router-dom\";\n\nimport XPress from '../utils/XPress';\n\nclass Series extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      series: null,\n      issues: [],\n      artists: {}\n    };\n\n    this.updateSeriesName = this.updateSeriesName.bind(this);\n    this.updateSeriesDescription = this.updateSeriesDescription.bind(this);\n    this.updateIssueName = this.updateIssueName.bind(this);\n    this.updateIssueNumber = this.updateIssueNumber.bind(this);\n    this.updateIssueDate = this.updateIssueDate.bind(this);\n    this.updateIssueArtist = this.updateIssueArtist.bind(this);\n    this.saveSeries = this.saveSeries.bind(this);\n    this.cancelSeriesEdit = this.cancelSeriesEdit.bind(this);\n    this.deleteSeries = this.deleteSeries.bind(this);\n    this.addIssue = this.addIssue.bind(this);\n    this.saveIssue = this.saveIssue.bind(this);\n    this.cancelIssueEdit = this.cancelIssueEdit.bind(this);\n    this.deleteIssue = this.deleteIssue.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.match.params.id === 'new') {\n      const newSeries = {\n        name: '',\n        description: ''\n      };\n\n      this.setState({\n        series: newSeries,\n        savedSeries: JSON.parse(JSON.stringify(newSeries))\n      });\n      return;\n    }\n\n    XPress.getSeriesById(this.props.match.params.id).then(series => {\n      if (series) {\n        this.setState({\n          series: series,\n          savedSeries: JSON.parse(JSON.stringify(series))\n        });\n      }\n    });\n\n    this.initializeIssues();\n  }\n\n  initializeIssues() {\n    XPress.getIssues(this.props.match.params.id).then(issues => {\n      const sortedIssues = this.sortIssues(issues);\n      this.setState({\n        issues: sortedIssues,\n        savedIssues: JSON.parse(JSON.stringify(sortedIssues))\n      });\n    });\n\n    XPress.getArtists().then(artists => {\n      if (artists) {\n        const artistMapping = {};\n        artists.forEach(artist => artistMapping[artist.id] = artist.name);\n        this.setState({artists: artistMapping});\n      }\n    });\n  }\n\n  sortIssues(issues) {\n    return issues.sort((issue1, issue2) => {\n      if (issue1.issueNumber < issue2.issueNumber) {\n        return -1;\n      } else {\n        return 1;\n      }\n    });\n  }\n\n  seriesHasChanges() {\n    const series = this.state.series;\n    const savedSeries = this.state.savedSeries;\n    if (!savedSeries) {\n      return false;\n    }\n\n    if (series.name === savedSeries.name &&\n        series.description === savedSeries.description) {\n      return false;\n    }\n\n    return true;\n  }\n\n  seriesHasAllRequiredFields() {\n    return !!this.state.series.name && !!this.state.series.description;\n  }\n\n  issueHasChanges(issue, issueIndex) {\n    const savedIssue = this.state.savedIssues[issueIndex];\n\n    if (!issue.id) {\n      return true;\n    }\n\n    if (!savedIssue) {\n      return false;\n    }\n\n    if (issue.name === savedIssue.name &&\n        issue.issueNumber === savedIssue.issueNumber &&\n        issue.publicationDate === savedIssue.publicationDate &&\n        issue.artistId === savedIssue.artistId) {\n      return false;\n    }\n\n    return true;\n  }\n\n  issueHasAllRequiredFields(issue) {\n    return !!issue.name && !!issue.issueNumber && !! issue.publicationDate &&\n        issue.artistId;\n  }\n\n  updateSeriesName(event) {\n    const series = JSON.parse(JSON.stringify(this.state.series));\n    series.name = event.target.value;\n    this.setState({series: series});\n  }\n\n  updateSeriesDescription(event) {\n    const series = JSON.parse(JSON.stringify(this.state.series));\n    series.description = event.target.value;\n    this.setState({series: series});\n  }\n\n  updateIssueName(event, issueIndex) {\n    const issues = JSON.parse(JSON.stringify(this.state.issues));\n    issues[issueIndex].name = event.target.value;\n    this.setState({issues: issues});\n  }\n\n  updateIssueNumber(event, issueIndex) {\n    const issues = JSON.parse(JSON.stringify(this.state.issues));\n    issues[issueIndex].issueNumber = event.target.value;\n    this.setState({issues: issues});\n  }\n\n  updateIssueDate(event, issueIndex) {\n    const issues = JSON.parse(JSON.stringify(this.state.issues));\n    issues[issueIndex].publicationDate = event.target.value;\n    this.setState({issues: issues});\n  }\n\n  updateIssueArtist(event, issueIndex) {\n    const issues = JSON.parse(JSON.stringify(this.state.issues));\n    issues[issueIndex].artistId = event.target.value;\n    this.setState({issues: issues});\n  }\n\n  saveSeries() {\n    if (this.state.series.id) {\n      XPress.updateSeries(this.state.series).then(series => {\n        this.setState({\n          series: series,\n          savedSeries: JSON.parse(JSON.stringify(series))\n        });\n      });\n    } else {\n      XPress.createSeries(this.state.series).then(series => {\n        this.props.history.push(`/series/${series.id}`);\n        this.setState({\n          series: series,\n          savedSeries: JSON.parse(JSON.stringify(series))\n        });\n        this.initializeIssues();\n      });\n    }\n  }\n\n  cancelSeriesEdit() {\n    this.setState({\n      series: JSON.parse(JSON.stringify(this.state.savedSeries))\n    });\n  }\n\n  deleteSeries() {\n    XPress.deleteSeries(this.state.series.id).then(() => {\n      this.props.history.push('/');\n    });\n  }\n\n  addIssue() {\n    const defaultArtistId = Object.keys(this.state.artists)[0];\n    const newIssue = {\n      name: '',\n      issueNumber: '',\n      publicationDate: '',\n      artistId: defaultArtistId\n    };\n\n    const issues = JSON.parse(JSON.stringify(this.state.issues));\n    issues.push(newIssue);\n    const savedIssues = JSON.parse(JSON.stringify(this.state.savedIssues));\n    savedIssues.push(newIssue);\n    this.setState({\n      issues: issues,\n      savedIssues: savedIssues\n    });\n  }\n\n  saveIssue(issueIndex) {\n    if (this.state.issues[issueIndex].id) {\n      XPress.updateIssue(this.state.issues[issueIndex], this.state.series.id)\n        .then(issue => {\n          let issues = JSON.parse(JSON.stringify(this.state.issues));\n          issues.splice(issueIndex, 1, issue);\n          let savedIssues = JSON.parse(JSON.stringify(this.state.savedIssues));\n          savedIssues.splice(issueIndex, 1, issue);\n          issues = this.sortIssues(issues);\n          savedIssues = this.sortIssues(savedIssues);\n          this.setState({\n            issues: issues,\n            savedIssues: JSON.parse(JSON.stringify(issues))\n          });\n        });\n    } else {\n      XPress.createIssue(this.state.issues[issueIndex], this.state.series.id)\n        .then(issue => {\n          let issues = JSON.parse(JSON.stringify(this.state.issues));\n          issues.splice(issueIndex, 1, issue);\n          let savedIssues = JSON.parse(JSON.stringify(this.state.savedIssues));\n          savedIssues.splice(issueIndex, 1, issue);\n          issues = this.sortIssues(issues);\n          savedIssues = this.sortIssues(savedIssues);\n          this.setState({\n            issues: issues,\n            savedIssues: savedIssues\n          });\n      });\n    }\n  }\n\n  cancelIssueEdit(issueIndex) {\n    const issues = JSON.parse(JSON.stringify(this.state.issues));\n    const issue = issues[issueIndex];\n    if (!issue.id) {\n      this.deleteIssue(issue, issueIndex);\n    } else {\n      issues[issueIndex] = JSON.parse(JSON.stringify(this.state.savedIssues[issueIndex]));\n      this.setState({\n        issues: issues\n      });\n    }\n  }\n\n  deleteIssue(issue, issueIndex) {\n    XPress.deleteIssue(issue.id, this.state.series.id).then(() => {\n      const issues = JSON.parse(JSON.stringify(this.state.issues));\n      issues.splice(issueIndex, 1);\n      const savedIssues = JSON.parse(JSON.stringify(this.state.savedIssues));\n      savedIssues.splice(issueIndex, 1);\n      this.setState({\n        issues: issues,\n        savedIssues: savedIssues\n      });\n    });\n  }\n\n  generateArtistOptions() {\n    const artists = this.state.artists;\n    const options = [];\n    for (let artistId in artists) {\n      options.push(<option key={artists[artistId]} value={artistId}>{artists[artistId]}</option>);\n    }\n    return options;\n  }\n\n  renderSeriesButtons() {\n    const series = this.state.series;\n    let saveButton, cancelButton, deleteButton;\n\n    if (this.seriesHasChanges() && this.seriesHasAllRequiredFields()) {\n      saveButton =<a className={'button'} onClick={this.saveSeries}>Save</a>;\n    } else {\n      saveButton = <a className='button inactive'>Save</a>;\n    }\n\n    if (this.seriesHasChanges()) {\n      cancelButton =<a className={'button'} onClick={this.cancelSeriesEdit}>Cancel</a>\n    } else {\n      cancelButton = <a className='button inactive'>Cancel</a>;\n    }\n\n    if (!this.state.issues.length) {\n      deleteButton = <a className='button delete' onClick={this.deleteSeries}>Delete</a>;\n    } else {\n      deleteButton = '';\n    }\n\n    return (\n      <div className=\"buttons\">\n        {saveButton}\n        {cancelButton}\n        {deleteButton}\n      </div>\n    )\n  }\n\n  renderIssueButtons(issue, issueIndex) {\n    let saveButton, cancelButton, deleteButton;\n\n    if (this.issueHasChanges(issue, issueIndex) && this.issueHasAllRequiredFields(issue)) {\n      saveButton = <a className={'button'} onClick={this.saveIssue.bind(this, issueIndex)}>Save</a>;\n    } else {\n      saveButton = <a className='button inactive'>Save</a>;\n    }\n\n    if (this.issueHasChanges(issue, issueIndex)) {\n      cancelButton = <a className={'button'} onClick={this.cancelIssueEdit.bind(this, issueIndex)}>Cancel</a>\n    } else {\n      cancelButton = <a className='button inactive'>Cancel</a>;\n    }\n\n    deleteButton = <a className='button delete' onClick={this.deleteIssue.bind(this, issue, issueIndex)}>Delete</a>;\n\n    return (\n      <div className=\"buttons\">\n        {saveButton}\n        {cancelButton}\n        {deleteButton}\n      </div>\n    )\n  }\n\n  renderIssues() {\n    if (this.props.match.params.id === 'new') {\n      return '';\n    }\n    const issues = this.state.issues.map((issue, issueIndex) => {\n      return (\n        <div className=\"issue\" key={issue.id}>\n          <h3>Name: <input onChange={(e) => this.updateIssueName(e, issueIndex)} value={issue.name}/></h3>\n          <p>Issue # <input type=\"number\" onChange={(e) => this.updateIssueNumber(e, issueIndex)} value={issue.issueNumber} /></p>\n          <p>Date: <input onChange={(e) => this.updateIssueDate(e, issueIndex)} value={issue.publicationDate} /></p>\n          <p>Artist: <select onChange={(e) => this.updateIssueArtist(e, issueIndex)} value={issue.artistId}>\n            {this.generateArtistOptions()}\n          </select></p>\n          {this.renderIssueButtons(issue, issueIndex)}\n        </div>\n      );\n    });\n\n    return (\n      <div className=\"issue-container\">\n        <div className=\"issues\">\n          {issues}\n        </div>\n        <a className=\"button\" onClick={this.addIssue}>Add Issue</a>\n      </div>\n    );\n  }\n\n  render() {\n    if (!this.state.series) {\n      return <div className=\"Series\"></div>\n    }\n    const series = this.state.series;\n    return (\n      <div className=\"Series\">\n        <div className=\"description\">\n          <input onChange={this.updateSeriesName} value={series.name}  placeholder=\"Series Title\" />\n          <h3>Description</h3>\n          <textarea onChange={this.updateSeriesDescription} value={series.description} />\n          {this.renderSeriesButtons()}\n        </div>\n        {this.renderIssues()}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Series);\n","import React, { Component } from 'react';\nimport { Link, HashRouter as Router, Route } from 'react-router-dom';\n\nimport Artist from './Artist';\nimport Landing from './Landing';\nimport Series from './Series';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <header>\n            <Link to=\"/\" className=\"logo\">\n              <img src='./img/logo.svg' alt=\"logo\" className=\"desktop\" />\n              <img src='./img/logo-mobile.svg' alt=\"logo\" className=\"mobile\" />\n            </Link>\n          </header>\n          <Route exact path=\"/\" component={Landing} />\n          <Route path=\"/artists/:id\" component={Artist} />\n          <Route path=\"/series/:id\" component={Series} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './views/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","'use strict';\nconst mapObj = require('map-obj');\nconst camelCase = require('camelcase');\n\nconst has = (arr, key) => arr.some(x => typeof x === 'string' ? x === key : x.test(key));\n\nmodule.exports = (input, opts) => {\n\topts = Object.assign({\n\t\tdeep: false\n\t}, opts);\n\n\tconst exclude = opts.exclude;\n\n\treturn mapObj(input, (key, val) => {\n\t\tif (!(exclude && has(exclude, key))) {\n\t\t\tconst ret = camelCase(key);\n\t\t\tkey = ret;\n\t\t}\n\n\t\treturn [key, val];\n\t}, {deep: opts.deep});\n};\n"],"sourceRoot":""}
